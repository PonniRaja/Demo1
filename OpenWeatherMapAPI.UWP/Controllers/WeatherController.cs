/*
 * OpenWeatherMapAPI.UWP
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using OpenWeatherMapAPI.UWP;
using OpenWeatherMapAPI.UWP.Utilities;
using OpenWeatherMapAPI.UWP.Http.Request;
using OpenWeatherMapAPI.UWP.Http.Response;
using OpenWeatherMapAPI.UWP.Http.Client;
using OpenWeatherMapAPI.UWP.Exceptions;

namespace OpenWeatherMapAPI.UWP.Controllers
{
    public partial class WeatherController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static WeatherController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static WeatherController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new WeatherController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations.
        /// </summary>
        /// <param name="q">Optional parameter: **City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes.</param>
        /// <param name="id">Optional parameter: **City ID**. *Example: `2172797`*. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in parameter &mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs. it's treated as 3 API calls.*</param>
        /// <param name="lat">Optional parameter: **Latitude**. *Example: 35*. The latitude cordinate of the location of your interest. Must use with `lon`.</param>
        /// <param name="lon">Optional parameter: **Longitude**. *Example: 139*. Longitude cordinate of the location of your interest. Must use with `lat`.</param>
        /// <param name="zip">Optional parameter: **Zip code**. Search by zip code. *Example: 95050,us*. Please note if country is not specified then the search works for USA as a default.</param>
        /// <param name="units">Optional parameter: **Units**. *Example: imperial*. Possible values: `metric`, `imperial`. When you do not use units parameter, format is `standard` by default.</param>
        /// <param name="lang">Optional parameter: **Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`, Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese Traditional - `zh_tw`.</param>
        /// <param name="mode">Optional parameter: **Mode**. *Example: html*. Determines format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default.</param>
        /// <return>Returns the Models.SuccessfulResponse response from the API call</return>
        public Models.SuccessfulResponse GetCallCurrentWeatherDataForOneLocation(
                string q = null,
                string id = null,
                string lat = null,
                string lon = null,
                string zip = "94040,us",
                Models.UnitsEnum? units = Models.UnitsEnum.STANDARD,
                Models.LangEnum? lang = Models.LangEnum.EN,
                Models.ModeEnum? mode = Models.ModeEnum.JSON)
        {
            Task<Models.SuccessfulResponse> t = GetCallCurrentWeatherDataForOneLocationAsync(q, id, lat, lon, zip, units, lang, mode);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations.
        /// </summary>
        /// <param name="q">Optional parameter: **City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes.</param>
        /// <param name="id">Optional parameter: **City ID**. *Example: `2172797`*. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in parameter &mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs. it's treated as 3 API calls.*</param>
        /// <param name="lat">Optional parameter: **Latitude**. *Example: 35*. The latitude cordinate of the location of your interest. Must use with `lon`.</param>
        /// <param name="lon">Optional parameter: **Longitude**. *Example: 139*. Longitude cordinate of the location of your interest. Must use with `lat`.</param>
        /// <param name="zip">Optional parameter: **Zip code**. Search by zip code. *Example: 95050,us*. Please note if country is not specified then the search works for USA as a default.</param>
        /// <param name="units">Optional parameter: **Units**. *Example: imperial*. Possible values: `metric`, `imperial`. When you do not use units parameter, format is `standard` by default.</param>
        /// <param name="lang">Optional parameter: **Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`, Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese Traditional - `zh_tw`.</param>
        /// <param name="mode">Optional parameter: **Mode**. *Example: html*. Determines format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default.</param>
        /// <return>Returns the Models.SuccessfulResponse response from the API call</return>
        public async Task<Models.SuccessfulResponse> GetCallCurrentWeatherDataForOneLocationAsync(
                string q = null,
                string id = null,
                string lat = null,
                string lon = null,
                string zip = "94040,us",
                Models.UnitsEnum? units = Models.UnitsEnum.STANDARD,
                Models.LangEnum? lang = Models.LangEnum.EN,
                Models.ModeEnum? mode = Models.ModeEnum.JSON)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/weather");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "q", q },
                { "id", id },
                { "lat", lat },
                { "lon", lon },
                { "zip", (null != zip) ? zip : "94040,us" },
                { "units", (units.HasValue) ? Models.UnitsEnumHelper.ToValue(units.Value) : "standard" },
                { "lang", (lang.HasValue) ? Models.LangEnumHelper.ToValue(lang.Value) : "en" },
                { "Mode", (mode.HasValue) ? Models.ModeEnumHelper.ToValue(mode.Value) : "json" },
                { "appid", Configuration.Appid }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Not found response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SuccessfulResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 