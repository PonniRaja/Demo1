/*
 * OpenWeatherMapAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using OpenWeatherMapAPI.UWP;
using OpenWeatherMapAPI.UWP.Utilities; 
using OpenWeatherMapAPI.UWP.Http.Client;
using OpenWeatherMapAPI.UWP.Http.Response;
using OpenWeatherMapAPI.Tests.Helpers;
using Microsoft.VisualStudio.TestPlatform.UnitTestFramework;
using OpenWeatherMapAPI.UWP;
using OpenWeatherMapAPI.UWP.Controllers;
using OpenWeatherMapAPI.UWP.Exceptions;

namespace OpenWeatherMapAPI.Tests
{
    [TestClass]
    public class WeatherControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static WeatherController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [TestInitialize]
        public void SetUpClass()
        {
            controller = GetClient().Weather;
        }

        /// <summary>
        /// Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations. 
        /// </summary>
        [TestMethod]
        public async Task TestCallCurrentWeatherDataForOneLocation1() 
        {
            // Parameters for the API call
            string q = null;
            string id = null;
            string lat = null;
            string lon = null;
            string zip = "94040,us";
            UWP.Models.UnitsEnum units = UWP.Models.UnitsEnumHelper.ParseString("imperial");
            UWP.Models.LangEnum lang = UWP.Models.LangEnumHelper.ParseString("en");
            UWP.Models.ModeEnum mode = UWP.Models.ModeEnumHelper.ParseString("json");

            // Perform API call
            UWP.Models.SuccessfulResponse result = null;

            try
            {
                result = await controller.GetCallCurrentWeatherDataForOneLocationAsync(q, id, lat, lon, zip, units, lang, mode);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

        }

    }
}